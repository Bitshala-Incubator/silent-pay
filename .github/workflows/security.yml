name: 'Security Analysis'

on:
  push:
    branches:
      - main
      - develop
      - 'security/**'
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened, ready_for_review]
  schedule:
    - cron: '0 3 * * 2' # Weekly on Tuesday at 3 AM UTC
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - codeql
          - dependencies
          - secrets
          - sast

env:
  NODE_VERSION: '20.x'

jobs:
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      (github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'codeql' || github.event.inputs.scan_type == '')
    
    timeout-minutes: 30
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality
          config: |
            name: "CodeQL Config"
            disable-default-queries: false
            queries:
              - uses: security-and-quality
              - uses: security-extended
            paths-ignore:
              - node_modules
              - dist
              - coverage
              - '**/*.test.ts'
              - '**/*.spec.ts'
              
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --ignore-scripts
        
      - name: Build project
        run: |
          npm run build --ws || echo "Build step completed with warnings"
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      (github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == '')
    
    timeout-minutes: 15
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --ignore-scripts
        
      - name: npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=moderate --output=json > npm-audit.json || true
          npm audit --audit-level=moderate || echo "Vulnerabilities found"
          
      - name: Upload npm audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit.json
          retention-days: 30
          
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      (github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == '')
    
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      (github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'sast' || github.event.inputs.scan_type == '')
    
    timeout-minutes: 20
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --ignore-scripts
        
      - name: ESLint Security Analysis
        run: |
          echo "Running ESLint with security rules..."
          npx eslint . --ext .js,.ts --format json --output-file eslint-security.json || true
          npx eslint . --ext .js,.ts || echo "ESLint found issues"
          
      - name: Semgrep SAST Scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/javascript
            p/nodejs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true
        
      - name: Upload SAST results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: |
            eslint-security.json
            semgrep-results.json
          retention-days: 30

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      (github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == '')
    
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --ignore-scripts
        
      - name: License Checker
        run: |
          echo "Checking package licenses..."
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' || npm install -g license-checker && license-checker --summary
          
      - name: Generate license report
        run: |
          echo "Generating detailed license report..."
          npx license-checker --json --out license-report.json || true
          
      - name: Upload license report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-security, secret-scan, sast-scan, license-compliance]
    if: always()
    
    steps:
      - name: Generate Security Summary
        run: |
          echo "## Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Security Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Security | ${{ needs.dependency-security.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secret-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST Scan | ${{ needs.sast-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-compliance.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          
      - name: Security notification
        if: failure()
        run: |
          echo "‚ùå Security vulnerabilities detected. Please review the security tab for details."
          echo "Visit: https://github.com/${{ github.repository }}/security"