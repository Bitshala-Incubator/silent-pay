name: 'CI/CD Pipeline'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

env:
  NODE_VERSION: '20.9.x'
  BITCOIN_RPC_USER: alice
  BITCOIN_RPC_PASSWORD: password
  BITCOIN_RPC_HOST: localhost:18443

jobs:
  # Job 1: Code Quality and Linting
  lint:
    name: 'Code Quality & Linting'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Check code formatting (Prettier)
        run: npm run format:check

      - name: Run ESLint
        if: success() || failure()
        run: npm run lint

  # Job 2: Build Packages
  build:
    name: 'Build Packages'
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: TypeScript compilation check (all packages)
        run: npm run types:check --ws

      - name: Build all packages
        run: npm run build --ws

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
          retention-days: 7

  # Job 3: Unit and Integration Tests
  test:
    name: 'Tests'
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start test containers
        run: docker compose -f "./dev/docker-compose.yaml" up -d

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Wait for Bitcoin node to be ready
        run: |
          echo "Waiting for Bitcoin node to start..."
          timeout 60 sh -c 'until curl -s --fail --user alice:password --data-raw "{\"method\":\"getblockchaininfo\",\"params\":[],\"id\":1}" http://localhost:18443; do sleep 2; done'

      - name: Mine initial blocks
        run: |
          curl --header "Content-Type: application/json" \
               -X POST http://alice:password@localhost:18443 \
               -d '{"method": "generatetoaddress", "params": [10, "bcrt1qq2yshcmzdlznnpxx258xswqlmqcxjs4dssfxt2"]}'

      - name: Wait for Esplora to become available
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 3
          retry_wait_seconds: 15
          max_attempts: 15
          command: curl --fail -X GET http://localhost:8094/regtest/api/blocks/tip/height

      - name: Run unit tests
        run: npm run test --ws

      - name: Run tests with coverage
        run: npm run test:cov --ws

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: ./packages/*/coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

      - name: Fetch container logs on failure
        if: failure()
        run: |
          echo "=== Bitcoin Core logs ==="
          docker compose -f "./dev/docker-compose.yaml" logs bitcoind
          echo "=== Esplora logs ==="
          docker compose -f "./dev/docker-compose.yaml" logs esplora

      - name: Stop test containers
        if: always()
        run: docker compose -f "./dev/docker-compose.yaml" down

  # Job 4: Security Vulnerability Scan
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Scan for vulnerabilities with Anchore
        uses: anchore/scan-action@v3
        with:
          path: "."
          output-format: "table"
        continue-on-error: true

  # Job 5: Dependency Check
  dependency-check:
    name: 'Dependency Analysis'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Check for unused dependencies
        run: |
          npm install -g depcheck
          depcheck --skip-missing
        continue-on-error: true

  # Job 6: Final Status Check
  status-check:
    name: 'CI/CD Status'
    runs-on: ubuntu-latest
    needs: [lint, build, test, security, dependency-check]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint status: ${{ needs.lint.result }}"
          echo "Build status: ${{ needs.build.result }}"
          echo "Test status: ${{ needs.test.result }}"
          echo "Security status: ${{ needs.security.result }}"
          echo "Dependency check status: ${{ needs.dependency-check.result }}"
          
          # Fail if critical jobs failed
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.build.result }}" == "failure" || "${{ needs.test.result }}" == "failure" ]]; then
            echo "Critical jobs failed!"
            exit 1
          fi
          
          echo "CI/CD pipeline completed successfully!"