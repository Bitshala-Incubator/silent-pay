name: 'Release'

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Prerelease tag (e.g., alpha, beta, rc)'
        required: false
        default: 'alpha'
        type: string
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Version validation and preparation
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    
    outputs:
      current_version: ${{ steps.version.outputs.current }}
      new_version: ${{ steps.version.outputs.new }}
      changelog: ${{ steps.changelog.outputs.content }}
      should_release: ${{ steps.changes.outputs.should_release }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --ignore-scripts
        
      - name: Check for changes since last release
        id: changes
        run: |
          # Get the latest release tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Check if there are commits since last release
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            echo "No previous releases found"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            COMMITS_SINCE_RELEASE=$(git rev-list $LATEST_TAG..HEAD --count)
            echo "Commits since release: $COMMITS_SINCE_RELEASE"
            
            if [ "$COMMITS_SINCE_RELEASE" -gt 0 ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Determine version bump
        id: version
        if: steps.changes.outputs.should_release == 'true'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Determine release type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Auto-determine based on commit messages
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            COMMITS_MSG=$(git log $LATEST_TAG..HEAD --pretty=format:"%s" | tr '\n' ' ')
            
            if echo "$COMMITS_MSG" | grep -q "BREAKING CHANGE\|feat!:"; then
              RELEASE_TYPE="major"
            elif echo "$COMMITS_MSG" | grep -q "feat:"; then
              RELEASE_TYPE="minor"
            else
              RELEASE_TYPE="patch"
            fi
          fi
          
          echo "Release type: $RELEASE_TYPE"
          
          # Calculate new version
          if [ "$RELEASE_TYPE" = "prerelease" ]; then
            PRERELEASE_TAG="${{ github.event.inputs.prerelease_tag || 'alpha' }}"
            NEW_VERSION=$(npm version --no-git-tag-version prerelease --preid=$PRERELEASE_TAG)
          else
            NEW_VERSION=$(npm version --no-git-tag-version $RELEASE_TYPE)
          fi
          
          # Remove 'v' prefix if present
          NEW_VERSION=${NEW_VERSION#v}
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Reset package.json
          git checkout -- package.json
          
      - name: Generate changelog
        id: changelog
        if: steps.changes.outputs.should_release == 'true'
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
          else
            CHANGELOG=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s" --no-merges)
          fi
          
          # Format changelog
          {
            echo "## What's Changed"
            echo ""
            echo "$CHANGELOG"
            echo ""
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...v${{ steps.version.outputs.new }}"
          } > changelog.md
          
          # Set output (escape newlines)
          {
            echo 'content<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_OUTPUT

  # Run tests before release
  test-before-release:
    name: Test Before Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: |
      needs.prepare-release.outputs.should_release == 'true' &&
      github.event.inputs.skip_tests != 'true'
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x', '22.x']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint --ws
        
      - name: Run tests
        run: npm test --ws
        
      - name: Build packages
        run: npm run build --ws

  # Create and publish release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [prepare-release, test-before-release]
    if: |
      always() &&
      needs.prepare-release.outputs.should_release == 'true' &&
      (needs.test-before-release.result == 'success' || needs.test-before-release.result == 'skipped')
    
    permissions:
      contents: write
      packages: write
    
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: v${{ needs.prepare-release.outputs.new_version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npm run build --ws
        
      - name: Update version in packages
        run: |
          NEW_VERSION="${{ needs.prepare-release.outputs.new_version }}"
          echo "Updating to version: $NEW_VERSION"
          
          # Update root package.json
          npm version --no-git-tag-version $NEW_VERSION
          
          # Update workspace packages
          npm version --no-git-tag-version $NEW_VERSION --workspaces
          
      - name: Run tests one more time
        if: github.event.inputs.skip_tests != 'true'
        run: npm test --ws
        
      - name: Commit version changes
        run: |
          git add .
          git commit -m "chore: bump version to ${{ needs.prepare-release.outputs.new_version }}"
          
      - name: Create Git tag
        run: |
          git tag v${{ needs.prepare-release.outputs.new_version }}
          
      - name: Push changes and tag
        run: |
          git push origin main
          git push origin v${{ needs.prepare-release.outputs.new_version }}
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.new_version }}
          release_name: Release v${{ needs.prepare-release.outputs.new_version }}
          body: ${{ needs.prepare-release.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.new_version, '-') }}

  # Publish to npm registry
  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: |
      needs.prepare-release.outputs.should_release == 'true' &&
      !contains(needs.prepare-release.outputs.new_version, '-')
    
    strategy:
      matrix:
        package: ['core', 'esplora', 'level', 'wallet']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.new_version }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build -w packages/${{ matrix.package }}
        
      - name: Publish package
        run: |
          cd packages/${{ matrix.package }}
          
          # Check if package is private
          IS_PRIVATE=$(node -p "require('./package.json').private || false")
          
          if [ "$IS_PRIVATE" = "false" ]; then
            echo "Publishing ${{ matrix.package }} package..."
            npm publish
          else
            echo "Skipping private package: ${{ matrix.package }}"
          fi
        env:
          # NPM_TOKEN secret should be configured in repository settings for npm publishing
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create release artifacts
  create-artifacts:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: needs.prepare-release.outputs.should_release == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.new_version }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build all packages
        run: npm run build --ws
        
      - name: Create distribution archive
        run: |
          # Create dist directory
          mkdir -p release-artifacts
          
          # Copy built packages
          cp -r packages/*/dist release-artifacts/ 2>/dev/null || true
          cp -r packages/*/lib release-artifacts/ 2>/dev/null || true
          
          # Copy package files
          find packages -name "package.json" -exec cp {} release-artifacts/ \;
          
          # Create tarball
          tar -czf silent-pay-v${{ needs.prepare-release.outputs.new_version }}.tar.gz release-artifacts/
          
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./silent-pay-v${{ needs.prepare-release.outputs.new_version }}.tar.gz
          asset_name: silent-pay-v${{ needs.prepare-release.outputs.new_version }}.tar.gz
          asset_content_type: application/gzip

  # Post-release notifications
  post-release:
    name: Post Release Actions
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release, publish-packages, create-artifacts]
    if: always() && needs.prepare-release.outputs.should_release == 'true'
    
    steps:
      - name: Release Summary
        run: |
          echo "## 🎉 Release v${{ needs.prepare-release.outputs.new_version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.prepare-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: v${{ needs.prepare-release.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status:" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Create Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Publish Packages | ${{ needs.publish-packages.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Create Artifacts | ${{ needs.create-artifacts.result }} |" >> $GITHUB_STEP_SUMMARY
          
      - name: Notify on failure
        if: |
          needs.create-release.result == 'failure' ||
          needs.publish-packages.result == 'failure' ||
          needs.create-artifacts.result == 'failure'
        run: |
          echo "❌ Some release jobs failed. Please check the workflow logs."
          exit 1
